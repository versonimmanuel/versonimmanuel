import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset, specifying the delimiter as semicolon
data = pd.read_csv('student-mat.csv', delimiter=';')  # Changed delimiter to ';'

# Check the column names
print("Column Names:")
print(data.columns.tolist())

# Get the actual target column name from the DataFrame (e.g., 'G3')
target = 'G3' 

# Using the tolist() method to get the actual column names from the DataFrame
features = data.columns.tolist()  

# Attempt to find the target column name (case-insensitive)
target_col = next((col for col in features if col.lower() == target.lower()), None)

# If target column found, remove it from features
if target_col:
    features.remove(target_col)
else:
    raise ValueError(f"Target column '{target}' not found in the DataFrame. "
                     f"Available columns: {data.columns.tolist()}")

# Splitting the dataset into features and target variable
X = data[features]
y = data[target]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocessing steps: OneHotEncoding for categorical variables and StandardScaler for numerical ones
numeric_features = ['age', 'Medu', 'Fedu', 'traveltime', 'studytime', 'failures', 
                   'famrel', 'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2']
categorical_features = ['sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob', 
                        'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 
                        'activities', 'nursery', 'higher', 'internet', 'romantic']

# Create preprocessing pipelines
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Creating the linear regression model pipeline
model = Pipeline(steps=[('preprocessor', preprocessor),
                         ('regressor', LinearRegression())])

# Fitting the model
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Model evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')